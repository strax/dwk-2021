name: Release project
on:
  [push]
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DOCKER_BUILDKIT: 1
jobs:
  build-frontend-image:
    name: "frontend: build and push"
    outputs:
      image: ${{ steps.build-push.outputs.image }}
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: dwk-project-frontend
    defaults:
      run:
        working-directory: project/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - id: build-push
        name: Build image and push to registry
        run: |
          REVISION="${GITHUB_REF#refs/heads/}-$(git rev-parse --short $GITHUB_SHA)"
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          docker build \
            --tag "$IMAGE_ID:$REVISION" \
            --cache-from "$IMAGE_ID" \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --label org.opencontainers.image.revision="$GITHUB_SHA" \
            .
          docker push "$IMAGE_ID:$REVISION"
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            docker tag "$IMAGE_ID:$REVISION" "$IMAGE_ID:latest"
            docker push "$IMAGE_ID:latest"
          fi
          echo "::set-output name=image::$IMAGE_ID:$REVISION"
  build-api-image:
    name: "api: build and push"
    outputs:
      image: ${{ steps.build-push.outputs.image }}
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: dwk-project-api
    defaults:
      run:
        working-directory: project/api
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - id: build-push
        name: Build image and push to registry
        run: |
          REVISION="${GITHUB_REF#refs/heads/}-$(git rev-parse --short $GITHUB_SHA)"
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          docker build \
            --tag "$IMAGE_ID:$REVISION" \
            --cache-from "$IMAGE_ID" \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --label org.opencontainers.image.revision="$GITHUB_SHA" \
            .
          docker push "$IMAGE_ID:$REVISION"
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            docker tag "$IMAGE_ID:$REVISION" "$IMAGE_ID:latest"
            docker push "$IMAGE_ID:latest"
          fi
          echo "::set-output name=image::$IMAGE_ID:$REVISION"
  gke:
    name: "Deploy to GKE"
    needs: [build-frontend-image, build-api-image]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: project
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
      - run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      - name: Setup Kustomize
        run: |
          curl -sfLo- https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.1.3/kustomize_v4.1.3_linux_amd64.tar.gz | tar -xz
          ./kustomize version
      - name: Deploy
        run: |
          ./kustomize edit set image frontend/image=${{ needs.build-frontend-image.outputs.image }}
          ./kustomize edit set image api/image=${{ needs.build-api-image.outputs.image }}
          kubectl apply -k .